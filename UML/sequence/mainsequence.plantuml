@startuml

hide footbox

title メインシーケンス


participant "main" as FuncMain
participant "StateManager" as ClassStateManager
participant "TimingManager" as ClassTimingManager
participant "Ticker" as ClassTicker
participant "TemperatureControler" as ClassTemperatureControler
participant "TemperatureGetter" as ClassTemperatureGetter
participant "SwitchMonitor" as ClassSwitchMonitor
participant "UVRight" as ClassUVRight

activate FuncMain

== 温度管理開始 ==

FuncMain -> ClassTimingManager : タイミング管理開始
  activate ClassTimingManager
FuncMain <-- ClassTimingManager
  deactivate ClassTimingManager

== スイッチモニタリング開始 ==
FuncMain -> ClassUVRight : スイッチモニタリング開始
  activate ClassUVRight
FuncMain <-- ClassUVRight
  deactivate ClassUVRight

== タイミング割り込み ==
ClassTimingManager <<- ClassTicker : タイマ割り込み
  activate ClassTimingManager
ClassTimingManager -> ClassTimingManager : 周期経過フラグON
  activate ClassTimingManager
  deactivate ClassTimingManager
ClassTimingManager -->> ClassTicker
  deactivate ClassTimingManager

== 無限ループ ==

loop
  FuncMain -> ClassSwitchMonitor : スイッチ状態問い合わせ
    activate ClassSwitchMonitor
  FuncMain <-- ClassSwitchMonitor : スイッチ状態
    deactivate ClassSwitchMonitor

  alt スイッチ[ON]
    FuncMain -> ClassUVRight : UVライトON
      activate ClassUVRight
    FuncMain <-- ClassUVRight
      deactivate ClassUVRight
  else スイッチ[OFF]
    FuncMain -> ClassUVRight : UVライトOFF
      activate ClassUVRight
    FuncMain <-- ClassUVRight
      deactivate ClassUVRight
  end


  opt 周期経過フラグ[ON]
  FuncMain -> ClassStateManager : 温度管理
    activate ClassStateManager
    == 現在温度取得 ==
    ClassStateManager -> ClassTemperatureGetter : 温度取得
      activate ClassTemperatureGetter
    ClassStateManager <-- ClassTemperatureGetter : 現在温度
      deactivate ClassTemperatureGetter

    == 状態管理 ==
    ref over ClassStateManager : 温度に応じて状態算出 \n 状態遷移図を参照

    ClassStateManager -> ClassStateManager : 状態遷移
      activate ClassStateManager
      deactivate ClassStateManager

    == 状態に応じて制御 ==
    alt 状態[昇温]
      ClassStateManager -> ClassTemperatureControler : 昇温
        activate ClassTemperatureControler
      ClassStateManager <-- ClassTemperatureControler
        deactivate ClassTemperatureControler
    else 状態[冷却]
      ClassStateManager -> ClassTemperatureControler : 冷却
        activate ClassTemperatureControler
      ClassStateManager <-- ClassTemperatureControler
        deactivate ClassTemperatureControler
    else 状態[保温]
      ClassStateManager -> ClassTemperatureControler : 保温
        activate ClassTemperatureControler
      ClassStateManager <-- ClassTemperatureControler
        deactivate ClassTemperatureControler
    end


    FuncMain <-- ClassStateManager
      deactivate ClassStateManager

    FuncMain -> ClassTimingManager :  周期経過フラグOFF
      activate ClassTimingManager
    FuncMain <-- ClassTimingManager
      deactivate ClassTimingManager
  end
end
@enduml
